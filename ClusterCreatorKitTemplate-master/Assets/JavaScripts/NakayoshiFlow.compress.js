function e(e,s){let o=$.state.playerData||{};$.state.isGameFinished||o[e]&&o[e].answered?$.log(`Player ${e} has already answered this question or the game is finished.`):(o[e]={choice:s,answered:!0},$.state.playerData=o,$.log(`Player ${e} selected ${s}`),function(){let e=$.state.playerData||{},s=Object.keys($.state.playerNames||{}).length,o=0;for(let t in e)e[t].answered&&o++;if($.log(`Total players: ${s}, Answered players: ${o}`),o===s){let s=e[$.state.ownerId].choice;$.log(`Owner ${$.state.playerNames[$.state.ownerId]} chose: ${s}`);for(let a in e)a!==$.state.ownerId&&e[a].choice===s&&(t(a,1),$.log(`Player ${a} matched the owner's choice!`));let o=$.state.questionIndex+1;o<n.length?($.state.questionIndex=o,a(o)):function(){const e=$.worldItemReference("QuestionUI");if($.log(`Player data at the end of the game: ${JSON.stringify($.state.playerData)}`),e){let t=-1,s=null;for(let e in $.state.scores)$.state.scores[e]>t&&(t=$.state.scores[e],s=e);if(s){let a=$.state.playerNames[s];e.send("finishQuiz",{winnerName:a,winnerScore:t}),$.log(`Game finished. Winner: ${a} with score: ${t}`)}else $.log("No winner found.")}else $.log("ResultUI not found.");$.state.isGameFinished=!0}()}}())}function t(e,t){let a=$.state.scores||{},n=a[e]||0;n+=t,a[e]=n,$.state.scores=a,s()}function s(){const e=$.subNode("PlayerScoreList");let t="";for(let e in $.state.scores){t+=`Player: ${$.state.playerNames[e]||"Unknown"} - Score: ${$.state.scores[e]}\n`}e.setText(t)}function a(e){if($.state.isGameStarted&&!$.state.isGameFinished&&$.state.isQuestionActive){$.state.isQuestionActive=!1,$.log("Moving to the next question.");let t=$.state.playerNames[$.state.ownerId];const s=$.worldItemReference("QuestionUI");if(s){s.send("nextQuestionUI",{index:e,ownerName:t}),$.log(`Sending nextQuestionUI with index ${e} and owner ${t}`);let a=$.worldItemReference("Timer"),n=$.worldItemReference("TimerCube"),o=Vector3(0,.959999979,4.0999999),r=Vector3(0,0,0);$.crearItem(a,o,r),$.crearItem(n,o,r);let i=$.state.playerData;for(let e in i)i[e].answered=!1;$.state.playerData=i}else $.log("No QuestionUI found.");$.state.isQuestionActive=!0}}$.onStart((()=>{$.state.isGameStarted=!1,$.state.isQuestionActive=!1,$.state.isGameFinished=!1,$.state.questionIndex=0,$.state.scores=$.state.scores||{},$.state.playerNames=$.state.playerNames||{},$.state.playerData={},$.state.ownerId=null;$.subNode("PlayerScoreList").setText("PLAYERLIST")})),$.onReceive(((t,n,o)=>{switch($.log(`Flow Received messageType: ${t}`),$.log(`Data received: ${JSON.stringify(n)}`),t){case"playerJoined":!function(e,t){let a=$.state.playerNames||{},n=$.state.scores||{};void 0===n[e]&&(n[e]=0);a[e]=t,$.state.playerNames=a,$.state.scores=n;const o=$.worldItemReference("JoinUI");o?(o.send("joinPlayer",{playerId:e,userDisplayName:t||"Unknown"}),$.log(`Player ${a[e]} joined.`)):$.log("noy fonnd JoinUI");s()}(n.playerId,n.userDisplayName);break;case"playerAnswered":e(n.playerId,n.choice);break;case"startGame":!function(){if($.state.isGameStarted||$.state.isGameFinished)$.log("Game is already running or finished.");else{$.state.isGameStarted=!0,$.state.isQuestionActive=!0,$.state.questionIndex=0,$.log("Game started! First question is active.");let e=Object.keys($.state.playerNames);if(0===e.length)return void $.log("No players available to select as owner.");let t=Math.floor(Math.random()*e.length);$.state.ownerId=e[t],$.log(`Selected owner: ${$.state.playerNames[$.state.ownerId]} (ID: ${$.state.ownerId})`);const s=$.worldItemReference("QuestionUI");s?(s.send("showQuestionUI",{index:0,ownerName:$.state.playerNames[$.state.ownerId]}),$.log("Sending showQuestionUI for the first question.")):$.log("QuestionUI not found.")}}();break;case"nextQuestion":a($.state.questionIndex);break;case"resetGame":!function(){$.state.isGameStarted=!1,$.state.isQuestionActive=!1,$.state.isGameFinished=!1,$.state.questionIndex=0,$.state.scores={},$.state.playerNames={},$.state.playerData={},$.subNode("PlayerScoreList").setText("Game has been reset. Ready for a new game.");const e=$.worldItemReference("QuestionUI");e&&e.send("resetQuizUI",{}),$.log("Game has been reset.")}();break;default:$.log(`Unknown message type: ${t}`)}}));const n=[{question:"どっち派？",choices:["A. きのこの山","B. たけのこの里"],correct_answer:null},{question:"どちらに住む？",choices:["A. 1年中冬の国","B. 1年中夏の国"],correct_answer:null},{question:"選ぶなら？",choices:["A. お金持ちで友達ゼロ","B. 貧乏だけど友達がたくさん"],correct_answer:null},{question:"飲むなら？",choices:["A. コーヒー","B. お茶"],correct_answer:null},{question:"休日にやりたいことは？",choices:["A. 家でゆっくりする","B. 外に出かける"],correct_answer:null},{question:"デートに行くなら？",choices:["A. 映画館","B. 水族館"],correct_answer:null},{question:"次の休暇に行きたいのは？",choices:["A. 海","B. 山"],correct_answer:null},{question:"好きな音楽は？",choices:["A. 邦楽","B. 洋楽"],correct_answer:null},{question:"デザートに食べたいのは？",choices:["A. チョコレートケーキ","B. チーズケーキ"],correct_answer:null},{question:"どちらの映画を観たい？",choices:["A. アクション映画","B. ロマンス映画"],correct_answer:null}];